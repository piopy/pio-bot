import requests, urllib, re,time, framescrap,getproxy,json
from bs4 import BeautifulSoup
from base64 import b64decode as ops
#returns link imgs titles
######## proxy ########
# calzino=getproxy.getproxy(tipo='socks5',nazione='FR') #socks5 #provare con requests.Session
# calzino=getproxy.getproxys2()
# print(calzino)
prox={#'http/https proxy if u have one
}
# print(prox)

########################
####### sources ########
# with open("sources.json") as f:
#     data = json.loads(f.read())
#     token = data["token"]
#     user = data["user"]


######################## (to be updated due to an heroku & cloudflare issue)

def dec(stringa):
    return ops(stringa).decode("utf-8")

def altadefdance(url):
    links, imgs, titles=[] , [] , []
    s=requests.Session()
    s.proxies=prox
    req=s.get(url).text
    soup = BeautifulSoup(req, 'html.parser') ##div class="col-lg-3 col-md-4 col-xs-4 mb-30"
    for i in soup.find_all("div", class_="col-lg-3 col-md-4 col-xs-4 mb-30"):
        ##links
        link=i.find('a')
        links.append(link.get('href'))
        ##img
        img=i.find('img')
        imgs.append(img.get('src'))
        ##titles
        tit=i.find('h5', class_='titleFilm')
        titles.append(tit.get_text())

    return links,imgs,titles
        
def eurostrcamp(url):
    links, imgs, titles=[] , [] , []
    # s=requests.Session()
    # s.proxies=prox
    # req=s.get(url).text
    req=requests.get(url,proxies=prox,allow_redirects=True).text
    soup = BeautifulSoup(req, 'html.parser') #container-index-post col-xs-6 col-sm-4 col-md-2-5 col-lg-2-5
    for i in soup.find_all("div", class_="post-thumb"):
        ##links
        link=i.find('a')
        links.append(link.get('href'))
        ##img
        img=i.find('img')
        imgs.append(img.get('src'))
        ##titles
        tit=i.find('a')
        titles.append(tit.get('title'))

    return links,imgs,titles

def cb01dir(url):
    links, imgs, titles=[] , [] , []
    req=requests.get(url,proxies=prox,allow_redirects=True).text
    # req=requests.get(url,time.sleep(15),proxies=prox,allow_redirects=True).text
    soup = BeautifulSoup(req, 'html.parser') ##div class="card mp-post horizontal"
    for i in soup.find_all("div", class_="card mp-post horizontal"):
        ##links
        link=i.find('a')
        links.append(link.get('href'))
        ##img
        img=i.find('img')
        imgs.append(img.get('src'))
        ##titles
        tit=i.find('h3')
        titles.append(tit.get_text())
    return links,imgs,titles

def guardaserie(url):
    links, imgs, titles=[] , [] , []
    # s=requests.Session()
    # s.proxies=prox
    # req=s.get(url).text
    req=requests.get(url,proxies=prox,allow_redirects=True).text
    soup = BeautifulSoup(req, 'html.parser') ##div class=class="col-xs-6 col-sm-2-5"
    for i in soup.find_all("div", class_="mlnh-2"):
        try:
            ##links
            link=i.find('a')
            links.append(link.get('href'))
            ##img
            img=[]#i.find('img')
            #imgs.append(img.get('src'))
            ##titles
            tit=i.find('a')
            titles.append(tit.get_text())
        except: continue

    return links,imgs,titles

def altadefname(url):
    links, imgs, titles=[] , [] , []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser') ##div class="col-lg-3 col-md-3 col-xs-4"
    for i in soup.find_all("div", class_="col-lg-3 col-md-3 col-xs-4"):
        ##links
        link=i.find('a')
        links.append(link.get('href'))
        ##img
        img=i.find('img')
        imgs.append('https://altadefinizione.name'+img.get('src'))
        ##titles
        tit=i.find('h2', class_='titleFilm')
        titles.append(tit.get_text())

    return links,imgs,titles

def cineblogreen(url):
    links, imgs, titles=[] , [] , []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser') ##<article class="short">
    for i in soup.find_all("article", class_="short"):
        ##links
        link=i.find('a')
        links.append(link.get('href'))
        ##img
        #img=i.find('img')
        #imgs.append('https://cineblog01.green'+img.get('src'))
        ##titles
        tit=i.find('h3')
        titles.append(tit.get_text())

    return links,imgs,titles

def tanticool(url):
    links, imgs, titles=[] , [] , []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser') ##<div class="film film-2">
    for i in soup.find_all("div", class_="title-film title-film-2"):
        ##links
        link=i.find('a')
        links.append(link.get('href'))
        ##img
        img=[]#i.find('img')
        #imgs.append(img.get('src'))
        ##titles
        tit=i.find('p')
        titles.append(tit.get_text())

    return links,imgs,titles

def piratesc(url):
    links, imgs, titles=[] , [] , []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser') ##div class= container-index-post col-xs-4 col-sm-3 col-md-2-5 col-lg-2
    try:
        for i in soup.find_all("div", class_="container-index-post col-xs-4 col-sm-3 col-md-2-5 col-lg-2"):
            ##links
            link=i.find('a')
            links.append(link.get('href'))
            ##img
            img=i.find('img')
            imgs.append(img.get('src'))
            ##titles
            tit=i.find('h2')
            titles.append(tit.get_text())
    except Exception as e: 
        print(e)
    return links,imgs,titles

def dreamsub(url):
    links, imgs, titles=[] , [] , []
    req=requests.get(url,time.sleep(15),proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser') ##div class= showStreaming tvBlock
    
    for i in soup.find_all("div", class_="tvBlock"):
        ##links
        link=i.find('a')
        links.append('https://dreamsub.stream'+link.get('href'))
        ##img
        img=i.find('div',class_='cover')
        img=img.get('style').replace('--image-url:url(//','https://').replace(')','')
        # ##titles
        tit=i.find('b')
        titles.append(tit.get_text())
    
    return links,imgs,titles

def search(url):
    a,b,c=[],[],[]
    print("Search: Processing "+url)
    if 'altadefinizione.report' in url: #dance
        a,b,c= altadefdance(url)
    elif 'eurostreaming.tube' in url: #camp
        a,b,c= eurostrcamp(url)
    elif 'cb01.yoga' in url: #games
        a,b,c= cb01dir(url)
    elif 'guardaserie.cam' in url: #date
        a,b,c= guardaserie(url)
    elif 'altadefinizione.name' in url:
        a,b,c= altadefname(url)
    elif 'cineblog01.bid' in url:
        a,b,c= cineblogreen(url)
    elif 'tantifilm.host' in url: #cool
        a,b,c= tanticool(url)
    elif 'piratestreaming.video' in url: #date
        a,b,c= piratesc(url)
    elif 'dreamsub.stream' in url:
        a,b,c= dreamsub(url)
    else: 
        print("Non supportato")
        return [],[],[]
    print(str(a)+'\n'+str(b)+'\n'+str(c)+'\n')
    return a,b,c
    
def preparaurl(input):
    urls=[]
    
    urls.append('https://altadefinizione.report/?s='+input) #dance
    urls.append('https://www.eurostreaming.tube/?s='+input) #camp
    urls.append('https://cb01.yoga/?s='+input) #games #ha cloudflare diomadonna
    urls.append('https://guardaserie.cam/?do=search&mode=advanced&subaction=search&story='+input) #date
    urls.append('https://altadefinizione.name/index.php?story='+input+'&do=search&subaction=search')
    urls.append('https://cineblog01.bid/index.php?story='+input+'&do=search&subaction=search')
    urls.append('https://www.tantifilm.host/search/'+input) #host
    urls.append('https://www.piratestreaming.video/?s='+input) #date
    urls.append('https://dreamsub.stream/search/?q='+input)

    return urls

def globalsearch(listurls):
    l=[]
    i=[]
    t=[]
    for url in listurls:
        a,b,c=search(url)
        for x in a:l.append(x)
        for x in b:i.append(x)
        for x in c:t.append(x)
    return l,i,t

def globalprint(t,l):
    i=len(t)
    for r in range(i):
        titolo=t[r]
        link=l[r]
        print(''+titolo+' - '+link)
        

def globalstring(t,l):
    i=len(t)
    res=''
    for r in range(i):
        titolo=t[r]
        link=l[r]
        res+=''+titolo+' - '+link+'\n'
    return res

def globallist(t,l):
    i=len(t)
    res=[]
    for r in range(i):
        titolo=t[r]
        link=l[r]
        if len(link)>0:res+=[titolo+' - '+link]
    return res

def main(): ##usage
    termsrc=input()
    listurls=preparaurl(termsrc)
    l,i,t=globalsearch(listurls)

    #print(globallist(t,l))
    new_l=[]
    for link in l:
        test=framescrap.sframestring(link)
        if len(link)>0: new_l.append(test)
    print(new_l)
    input()
    
if __name__ == '__main__':
    main()