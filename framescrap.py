import requests, getproxy
from bs4 import BeautifulSoup
from base64 import b64decode as ops

prox={
    # 'http':'http://'+getproxy.getproxy('http')
}

def dec(stringa):
    return ops(stringa).decode("utf-8")

def altadefdance(url):
    links= []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser')
    link=soup.find('iframe')
    if link is None: return []
    links.append(link.get('src'))
    return links

def eurostrcamp(url):
    ##non ha iframe
    return [url]

def cb01dir(url):
    links= []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser')
    temp=soup.findAll("div",class_="tabs-catch-all")
    if temp is None: return []
    for i in temp:
        if i is None: return []
        i=i.get('data-src')
        if i is None: return []
        links.append(i)
    return links

def guardaserie(url):
    #già embedded
    return [url]

def altadefname(url):
    #player-container-wrap guardahd-player
    links= []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser')
    try:
        link=soup.find('div', id='mirrFront')
        link=link.findAll('a')
        for i in link:
            tmp=i.get('data-target')
            if not 'http' in tmp: tmp='https:'+tmp
            if not 'fake2/index.html' in tmp:
                links.append(tmp)
    except: return []
    return links

def cineblogreen(url):
    #<ul class="list-inline list-inline-sm">
    links= []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser')
    link=soup.find('ul',class_="list-inline list-inline-sm")
    if link is None: return []
    link=link.findAll('a')
    if link is None: return []
    for i in link:
        i=i.get('data-link')
        if i is None: return []
        if not 'http' in i:
            i='https:'+i
        links.append(i)
    return links

def tanticool(url):
    links= []
    req=requests.get(url,proxies=prox).text
    soup = BeautifulSoup(req, 'html.parser')
    link=soup.find('iframe')
    if link is None: return []
    da=link.get('src')
    if da is None: return []
    links.append(da)
    return links

def piratesc(url):
    if '-serie-a/' in url: return [url]
    else:
        #embed-responsive-item
        links= []
        links.append(url)
        req=requests.get(url,proxies=prox).text
        soup = BeautifulSoup(req, 'html.parser')
        link=soup.findAll('iframe',class_="embed-responsive-item")
        if link is None: return []
        for i in link:
            i=i.get('src')
            if not 'youtube.com' in i: links.append(i)
        return links

def dreamsub(url):
    ##non ha iframe
    return [url]

def sframe(url):
    a=[]
    print("Frame: Processing "+url)
    if 'altadefinizione.report' in url:
        a= altadefdance(url)
    elif 'eurostreaming' in url:
        a= eurostrcamp(url)
    elif 'cb01.yoga' in url:
        a= cb01dir(url)
    elif 'guardaserie' in url:
        a= guardaserie(url)
    elif 'altadefinizione.name' in url:
        a= altadefname(url)
    elif 'cineblog' in url:
        a= cineblogreen(url)
    elif 'tantifilm' in url:
        a= tanticool(url)
    elif 'piratestreaming' in url:
        a= piratesc(url)
    elif 'dreamsub' in url:
        a= dreamsub(url)
    else: 
        print("Non supportato")
        return []
    print(a)
    return a

def sframestring(url):
    res=''
    list=sframe(url)
    for i in list:
        if not 'https:/definizione/index.html' in i: res+=i+'\n'
    return res

def main(): ##usage
    #url=input()
    url="https://dreamsub.stream/search/?q=hellboy"
    frameurl=sframe(url)
    for i in frameurl:
        print(i)
    #print(frameurl)
    
if __name__ == '__main__':
    main()